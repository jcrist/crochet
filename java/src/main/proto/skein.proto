syntax = "proto3";

option java_package = "com.anaconda.skein";
option java_outer_classname = "Msg";


package skein;


// Common definitions


message Empty {
}


message FinalStatus {
  enum Type {
    UNDEFINED = 0;
    SUCCEEDED = 1;
    FAILED = 2;
    KILLED = 3;
  }
}

message ApplicationState {
  enum Type {
    NEW = 0;
    NEW_SAVING = 1;
    SUBMITTED = 2;
    ACCEPTED = 3;
    RUNNING = 4;
    FINISHED = 5;
    FAILED = 6;
    KILLED = 7;
  }
}


message Resources {
  int32 memory = 1;
  int32 vcores = 2;
}


message Url {
  string scheme = 1;
  string host = 2;
  int32 port = 3;
  string file = 4;
}


message File {
  enum Type {
    FILE = 0;
    ARCHIVE = 1;
  }

  enum Visibility {
    PUBLIC = 0;
    PRIVATE = 1;
    APPLICATION = 2;
  }

  Url source = 1;
  Type type = 2;
  Visibility visibility = 3;
  int64 size = 4;
  int64 timestamp = 5;
}


message Service {
  int32 instances = 1;
  Resources resources = 2;
  map<string, File> files = 3;
  map<string, string> env = 4;
  repeated string commands = 5;
  repeated string depends = 6;
}


message Job {
  string name = 1;
  string queue = 2;
  map<string, Service> services = 3;
}


message ResourceUsageReport {
  int64 memory_seconds = 1;
  int64 vcore_seconds = 2;
  int64 num_used_containers = 3;
  Resources needed_resources = 4;
  Resources reserved_resources = 5;
  Resources used_resources = 6;
}


message ApplicationReport {
  string id = 1;
  string name = 2;
  string user = 3;
  string queue = 4;
  repeated string tags = 5;
  string host = 6;
  int32 port = 7;
  string tracking_url = 8;
  ApplicationState.Type state = 9;
  FinalStatus.Type final_status = 10;
  float progress = 11;
  ResourceUsageReport usage = 12;
  string diagnostics = 13;
  int64 start_time = 14;
  int64 finish_time = 15;
}


// Daemon only definitions


service Daemon {
  rpc ping (Empty) returns (Empty);

  rpc getStatus (Application) returns (ApplicationReport);

  rpc getApplications (ApplicationsRequest) returns (ApplicationsResponse);

  rpc submit (Job) returns (Application);

  rpc waitForStart (Application) returns (ApplicationReport);

  rpc kill (Application) returns (Empty);
}


message Application {
  string id = 1;
}


message ApplicationsRequest {
  repeated ApplicationState.Type states = 1;
}


message ApplicationsResponse {
  repeated ApplicationReport reports = 1;
}


// Master only definitions


service Master {
  rpc keystoreGet (GetKeyRequest) returns (GetKeyResponse);

  rpc keystoreSet (SetKeyRequest) returns (Empty);

  rpc keystore (Empty) returns (KeystoreResponse);

  rpc getService (ServiceRequest) returns (Service);

  rpc getJob (Empty) returns (Job);
}


message GetKeyRequest {
  string key = 1;
  bool wait = 2;
}


message GetKeyResponse {
  string val = 1;
}


message SetKeyRequest {
  string key = 1;
  string val = 2;
}


message KeystoreResponse {
  map<string, string> items = 1;
}


message ServiceRequest {
  string name = 1;
}
