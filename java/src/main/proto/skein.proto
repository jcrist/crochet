syntax = "proto3";

option java_package = "com.anaconda.skein";
option java_outer_classname = "Msg";


package skein;


// Common definitions


message Empty {
}


message FinalStatus {
  enum Type {
    UNDEFINED = 0;
    SUCCEEDED = 1;
    FAILED = 2;
    KILLED = 3;
  }
}

message ApplicationState {
  enum Type {
    NEW = 0;
    NEW_SAVING = 1;
    SUBMITTED = 2;
    ACCEPTED = 3;
    RUNNING = 4;
    FINISHED = 5;
    FAILED = 6;
    KILLED = 7;
  }
}


message Resources {
  int32 memory = 1;
  int32 vcores = 2;
}


message Url {
  string scheme = 1;
  string host = 2;
  int32 port = 3;
  string file = 4;
}


message File {
  enum Type {
    FILE = 0;
    ARCHIVE = 1;
  }

  enum Visibility {
    PUBLIC = 0;
    PRIVATE = 1;
    APPLICATION = 2;
  }

  Url source = 1;
  Type type = 2;
  Visibility visibility = 3;
  int64 size = 4;
  int64 timestamp = 5;
}


message Service {
  int32 instances = 1;
  int32 max_restarts = 2;
  Resources resources = 3;
  map<string, File> files = 4;
  map<string, string> env = 5;
  repeated string commands = 6;
  repeated string depends = 7;
}


message ApplicationSpec {
  string name = 1;
  string queue = 2;
  int32 max_attempts = 3;
  repeated string tags = 4;
  map<string, Service> services = 5;
}


message Container {
  enum State {
    WAITING = 0;
    REQUESTED = 1;
    RUNNING = 2;
    SUCCEEDED = 3;
    FAILED = 4;
    KILLED = 5;
  }
  string service_name = 1;
  int32 instance = 2;
  State state = 3;
  string yarn_container_id = 4;
  string yarn_node_address = 5;
  int64 start_time = 6;
  int64 finish_time = 7;
}


message ResourceUsageReport {
  int64 memory_seconds = 1;
  int64 vcore_seconds = 2;
  int64 num_used_containers = 3;
  Resources needed_resources = 4;
  Resources reserved_resources = 5;
  Resources used_resources = 6;
}


message ApplicationReport {
  string id = 1;
  string name = 2;
  string user = 3;
  string queue = 4;
  repeated string tags = 5;
  string host = 6;
  int32 port = 7;
  string tracking_url = 8;
  ApplicationState.Type state = 9;
  FinalStatus.Type final_status = 10;
  float progress = 11;
  ResourceUsageReport usage = 12;
  string diagnostics = 13;
  int64 start_time = 14;
  int64 finish_time = 15;
}


// Daemon only definitions


service Daemon {
  rpc ping (Empty) returns (Empty);

  rpc getStatus (Application) returns (ApplicationReport);

  rpc getApplications (ApplicationsRequest) returns (ApplicationsResponse);

  rpc submit (ApplicationSpec) returns (Application);

  rpc waitForStart (Application) returns (ApplicationReport);

  rpc kill (Application) returns (Empty);
}


message Application {
  string id = 1;
}


message ApplicationsRequest {
  repeated ApplicationState.Type states = 1;
}


message ApplicationsResponse {
  repeated ApplicationReport reports = 1;
}


// Master only definitions


service Master {
  rpc shutdown (ShutdownRequest) returns (Empty);

  rpc GetRange (GetRangeRequest) returns (GetRangeResponse);

  rpc Put (PutRequest) returns (PutResponse);

  rpc DeleteRange (DeleteRangeRequest) returns (DeleteRangeResponse);

  rpc Transaction (TransactionRequest) returns (TransactionResponse);

  rpc getApplicationSpec (Empty) returns (ApplicationSpec);

  rpc getContainers (ContainersRequest) returns (ContainersResponse);

  rpc killContainer (ContainerInstance) returns (Empty);

  rpc scale (ScaleRequest) returns (ContainersResponse);
}


message ShutdownRequest {
  FinalStatus.Type final_status = 1;
}


message KeyValue {
  string key = 1;
  bytes value = 2;
}


message GetRangeRequest {
  enum ResultType {
    ITEMS = 0;
    KEYS = 1;
    NONE = 2;
  }
  string range_start = 1;
  string range_end = 2;
  int32 limit = 3;
  ResultType result_type = 4;
}


message GetRangeResponse {
  GetRangeRequest.ResultType result_type = 1;
  int32 count = 2;
  repeated KeyValue kv = 3;
}


message PutRequest {
  KeyValue kv = 1;
  bool prev_kv = 2;
}


message PutResponse {
  KeyValue prev_kv = 1;
}


message DeleteRangeRequest {
  enum ResultType {
    NONE = 0;
    ITEMS = 1;
    KEYS = 2;
  }
  string range_start = 1;
  string range_end = 2;
  ResultType result_type = 3;
}


message DeleteRangeResponse {
  DeleteRangeRequest.ResultType result_type = 1;
  int32 count = 2;
  repeated KeyValue prev_kv = 3;
}


message Condition {
  message Exists {
    string key = 1;
  }

  message Equals {
    string key = 1;
    bytes value = 2;
  }

  bool inverse = 1;
  oneof op {
    Exists op_exists = 2;
    Equals op_equals = 3;
  }
}


message RequestOp {
  oneof request {
    GetRangeRequest request_get_range = 1;
    PutRequest request_put = 2;
    DeleteRangeRequest request_del_range = 3;
  }
}


message ResponseOp {
  oneof response {
    GetRangeResponse response_get = 1;
    PutResponse response_put = 2;
    DeleteRangeResponse response_del_range = 3;
  }
}


message TransactionRequest {
  repeated Condition conditions = 1;
  repeated RequestOp on_true = 2;
  repeated RequestOp on_false = 3;
}


message TransactionResponse {
  bool succeeded = 1;
  repeated ResponseOp responses = 2;
}


message ContainerInstance {
  string service_name = 1;
  int32 instance = 2;
}


message ContainersRequest {
  repeated Container.State states = 1;
  repeated string services = 2;
}


message ContainersResponse {
  repeated Container containers = 1;
}


message ScaleRequest {
  string service_name = 1;
  int32 instances = 2;
}
